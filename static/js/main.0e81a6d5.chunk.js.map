{"version":3,"sources":["sidebar/Sidebar.js","application/Card.js","application/CardModal.js","application/ApplicationPage.js","search/SearchPage.js","login/LoginPage.js","App.js","reportWebVitals.js","index.js"],"names":["Sidebar","token","localStorage","getItem","$","ajax","url","method","contentType","headers","success","data","removeItem","console","log","props","switchPage","error","err","JSON","stringify","this","className","onClick","logout","bind","Component","date","class","state","wordOfDate","Card","showEditModal","e","stopPropagation","dateType","find","d","application","status","jobTitle","companyName","id","CardEdit","closeEditModal","deleteApplication","submitFunc","event","setState","target","value","function_btn","mode","type","submitAction","Modal","show","onHide","Header","closeButton","Title","Body","htmlFor","onChange","handleChange","Footer","deleteAction","CardBoard","applications","card_titles","card_class","showModal","getData","groupApplication","createCardTitle","createCardClass","done","parse","result","catch","newApplications","async","msg","complete","componentDidMount","modalMode","applications_group","reduce","pv","v","app_class","title","card","push","forEach","app","applicationModal","updateCardBoard","columns","label","SearchPage","searchText","rows","addedList","keywords","res","map","i","location","alert","newRows","filter","newAddedList","job","newApplication","Date","toJSON","slice","replace","placeholder","search","column","row","addButton","includes","removeFromWaitlist","addToWaitlist","style","backgroundColor","deleteTheApplication","LoginPage","username","password","email","passwd","setItem","login","App","mapRouter","currentPage","pageName","React","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0e81a6d5.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport $ from 'jquery';\nimport '@fortawesome/fontawesome-free/js/fontawesome';\nimport '@fortawesome/fontawesome-free/css/fontawesome.css';\nimport '@fortawesome/fontawesome-free/js/solid';\nimport '@fortawesome/fontawesome-free/js/regular';\nimport '@fortawesome/fontawesome-free/js/brands';\n\nimport '../static/Sidebar.css'\nexport default class Sidebar extends Component {\n\n    logout() {\n        let token = localStorage.getItem('auth-token')\n        if(!token){\n            this.props.switchPage('LoginPage')\n        }\n        else{\n            $.ajax({\n                url: 'http://localhost:5000/logout',\n                method: 'POST',\n                contentType: 'application/json',\n                headers:{\n                    'x-access-token': token\n                },\n                success: (data) => {\n                    localStorage.removeItem('auth-token')\n                    console.log('Logout successful');\n                    this.props.switchPage('LoginPage');\n                },\n                error: (err) => {\n                    console.log(JSON.stringify(err));\n                }\n            })\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"left-nav\">\n                <div className=\"left-nav-item\">\n                    <div className=\"left-nav-text-wrapper\">\n                        <div onClick={() => this.props.switchPage('ApplicationPage')}>\n                            <i className=\"fas fa-columns left-nav-icon\" ></i>\n                        </div>\n                        Apps\n                    </div>\n                    <div className=\"left-nav-text-wrapper\">\n                        <div onClick={() => this.props.switchPage('SearchPage')}>\n                            <i className=\"fas fa-search left-nav-icon\"></i>\n                        </div>\n                        Search\n                    </div>\n                    <div className=\"left-nav-text-wrapper\">\n                        <div onClick={() => this.props.switchPage('LoginPage')}>\n                            <i className=\"fas fa-sign-in-alt left-nav-icon\"/>\n                        </div>\n                        Log In\n                    </div>\n                    <div className=\"left-nav-text-wrapper\">\n                        <div onClick={this.logout.bind(this)}>\n                            <i className=\"fas fa-sign-out-alt left-nav-icon\"/>\n                        </div>\n                        Log Out\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","import React, { Component } from 'react';\n\nlet date = [\n    {\n        class: \"1\",\n        state: \"Wish list\",\n        wordOfDate: \"Apply By\"\n    }, {\n        class: \"2\",\n        state: \"Waiting for referral\",\n        wordOfDate: \"Referral before \"\n    }, {\n        class: \"3\",\n        state: \"Applied\",\n        wordOfDate: \"Applied Date\"\n    }, {\n        class: \"4\",\n        state: \"Rejected\",\n        wordOfDate: \"Applied Date\"\n    }\n]\n\nclass Card extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            showEditModal: props.showEditModal\n        }\n\n    }\n\n    stopPropagation(e){\n        e.stopPropagation()\n    }\n\n    render() {\n        let dateType = date.find(d =>{\n            return d.class === this.props.application.status\n        })\n        return (\n            <div className=\"card card-col\" key={this.state.id+\"_card\"}  onClick={this.state.showEditModal}>\n                <div className=\"card-body\">\n                    <div className=\"card-action\">\n                        <h6 className=\"card-title\"  onClick={this.stopPropagation}>\n                            {this.props.application.jobTitle}\n                        </h6>\n                    </div>\n                    <p className=\"small-content-text\" key={this.props.application.companyName}>\n                        {this.props.application.companyName}<br/>\n                        {dateType.wordOfDate}: {this.props.application.date}\n                    </p>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Card;","import React, { Component } from 'react';\nimport { Modal } from 'react-bootstrap';\nexport default class CardEdit extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            closeEditModal: props.closeEditModal,\n            deleteApplication: props.deleteApplication,\n            submitFunc: props.submitFunc,\n            id: props.application.id,\n            jobTitle: props.application.jobTitle,\n            companyName: props.application.companyName,\n            date: props.application.date,\n            class: props.application.status\n        }\n    }\n\n    // set data to state automatically corresponding to the attribute 'id' of input field\n    // ex: <input id = 'date'> => setState({date: value})\n    handleChange(event){\n\t\tthis.setState({ [event.target.id]: event.target.value });\n\t}\n\n    submitAction(){\n        this.state.closeEditModal()\n        let application = {\n            id: this.state.id,\n            companyName: this.state.companyName,\n            jobTitle: this.state.jobTitle,\n            date: this.state.date,\n            status: this.state.class\n        }\n        // console.log(application)\n        // call parent function to handle data change\n        this.state.submitFunc(application)\n\n    }\n\n    deleteAction(){\n        this.state.closeEditModal()\n        let application = {\n            id: this.state.id,\n            companyName: this.state.companyName,\n            jobTitle: this.state.jobTitle,\n            date: this.state.date,\n            status: this.state.class\n        }\n        this.state.deleteApplication(application)\n    }\n\n    render() {\n\n        let function_btn = null\n        if (this.props.mode === 'update') {\n            function_btn = <button type=\"button\" className=\"btn btn-success\" onClick={this.submitAction.bind(this)}>\n                Update\n            </button>\n        }else{\n            function_btn = <button type=\"button\" className=\"btn btn-success\" onClick={this.submitAction.bind(this)}>\n                Create\n            </button>\n        }\n\n        let view = !this.props.application ? <div /> : <div>\n            <Modal show={this.props.show} onHide={this.state.closeEditModal}>\n                <Modal.Header closeButton>\n                    <Modal.Title>\n                        {this.props.application.companyName}\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"companyName\" className=\"col-form-label\">Company Name</label>\n                        <input type=\"text\" className=\"form-control\" id=\"companyName\" value={this.state.companyName} onChange={this.handleChange.bind(this)}/>\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"job_title\" className=\"col-form-label\">Job Title</label>\n                        <input type=\"text\" className=\"form-control\" id=\"jobTitle\" value={this.state.jobTitle} onChange={this.handleChange.bind(this)}/>\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"date\" className=\"col-form-label\">Date</label>\n                        <input type=\"date\" className=\"form-control\" id=\"date\" value={this.state.date} onChange={this.handleChange.bind(this)}/>\n                    </div>\n                    <div className=\"input-group mb-3\">\n                        <div className=\"input-group-prepend\">\n                            <label className=\"input-group-text\" htmlFor=\"class\">Application Type</label>\n                        </div>\n                        <select className=\"custom-select\" id=\"class\" value={this.state.class} onChange={this.handleChange.bind(this)}>\n                            <option >Choose...</option>\n                            <option value=\"1\">Wish list</option>\n                            <option value=\"2\">Waiting Referral</option>\n                            <option value=\"3\">Applied</option>\n                            <option value=\"4\">Rejected</option>\n                        </select>\n                    </div>\n                </Modal.Body>\n                <Modal.Footer>\n                    <button type=\"button\" className=\"btn btn-danger mr-auto\" onClick={this.deleteAction.bind(this)}>\n                        Delete\n                    </button>\n                    <button type=\"button\" className=\"btn btn-secondary\" onClick={this.state.closeEditModal}>\n                        Close\n                    </button>\n                    {function_btn}\n                </Modal.Footer>\n            </Modal>\n        </div >\n        return view\n    }\n}","import React, { Component } from 'react';\nimport Card from './Card';\nimport CardModal from './CardModal';\nimport $ from 'jquery'\n\n\nexport default class CardBoard extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            applications: [], \n            card_titles: [],\n            card_class: [],\n            showModal:false\n        }\n        this.getData = this.getData.bind(this);\n        this.groupApplication = this.groupApplication.bind(this);\n        this.createCardTitle = this.createCardTitle.bind(this);\n        this.createCardClass = this.createCardClass.bind(this);\n    }\n\n    // get initial data to render the root page\n    getData(){\n        let token = localStorage.getItem('auth-token')\n        if(token)\n        return $.ajax({\n                url: 'http://localhost:5000/application',\n                method: 'GET',\n                headers:{\n                    'x-access-token': token\n                },\n                error: (err)=>{\n                    console.log(JSON.stringify(err));\n                    this.props.switchPage('LoginPage')\n                }\n        })\n    }\n\n    componentDidMount(){\n        // fetch the data only after this component is mounted\n        let token = localStorage.getItem('auth-token')\n        if(token)\n        this.getData()\n        .done((data) => {\n            data = JSON.parse(data);\n            // console.log(data);\n            let result = this.groupApplication(data);\n            let card_titles = this.createCardTitle(result);\n            let card_class = this.createCardClass(result);\n            this.setState({\n                applications: data, \n                card_titles: card_titles,\n                card_class: card_class\n            })\n        }).catch((error)=>{\n            console.log(error)\n        });\n    }\n\n    // the update function for child component\n    updateCardBoard(application){\n        let newApplications = this.state.applications\n        // console.log(application)\n        let token = localStorage.getItem('auth-token')\n        if(!token){\n            this.props.switchPage('LoginPage')\n        }\n        else{\n            if (application.id == null){\n                // current application is a new application, create a new one and save in the backend.\n                $.ajax({\n                    url: 'http://localhost:5000/application', //TODO: will have to replace with production URL\n                    method: 'POST',\n                    async: false,\n                    headers:{\n                        'x-access-token': token\n                    },\n                    data:JSON.stringify({\n                        application: application\n                    }),\n                    contentType: 'application/json',\n                    success: (msg)=>{\n                        console.log(\"Success\")\n                    },\n                    error: (err)=>{\n                        console.log(JSON.stringify(err));\n                    },    \n                    complete: (data)=> {\n                        this.componentDidMount()\n                    }\n                })\n            } else {\n                $.ajax({\n                    url: 'http://localhost:5000/application',\n                    method: 'PUT',\n                    headers:{\n                        'x-access-token': token\n                    },\n                    async: false,\n                    data:JSON.stringify({\n                        application: application\n                    }),\n                    contentType: 'application/json',\n                    success: (msg)=>{\n                        console.log(\"Success\")\n                    },\n                    complete: (data)=> {\n                        this.componentDidMount()\n                    }\n                })\n            }\n            // rerender the page to represent the update result\n            let result = this.groupApplication(newApplications);\n            let card_titles = this.createCardTitle(result);\n            let card_class = this.createCardClass(result);\n    \n            this.setState({\n                applications: newApplications,\n                card_titles: card_titles,\n                card_class: card_class,\n                showModal: false,\n                application: null\n            })    \n        }\n    }\n\n    deleteApplication(application) {\n        let newApplications = this.state.applications\n        let token = localStorage.getItem('auth-token')\n        if(!token){\n            this.props.switchPage('LoginPage')\n        }\n        else{\n            $.ajax({\n                url: 'http://localhost:5000/application',\n                method: 'DELETE',\n                headers:{\n                    'x-access-token': token\n                },\n                async: false,\n                data:JSON.stringify({\n                    application: application\n                }),\n                contentType: 'application/json',\n                success: (msg)=>{\n                        console.log(\"Success\")\n                },\n                error: (err)=>{\n                    console.log(JSON.stringify(err));\n                },\n                complete: (data)=>{\n                    this.componentDidMount()\n                }\n            })\n            // rerender the page to represent the update result\n            let result = this.groupApplication(newApplications);\n            let card_titles = this.createCardTitle(result);\n            let card_class = this.createCardClass(result);\n    \n            this.setState({\n                applications: newApplications,\n                card_titles: card_titles,\n                card_class: card_class,\n                showModal: false,\n                application: null\n            })    \n        }\n    }\n\n    // open the card modal according to the application in parameter\n    showEditModal(application, mode) {\n        let modalMode = mode\n            \n        this.setState({\n            showModal: true,\n            application: application,\n            modalMode: modalMode\n        })\n    }\n\n    closeEditModal() {\n        this.setState({\n            showModal: false,\n            application: null\n        })\n    }\n\n    // create all cards(application) and make cards having the same class in the same column\n    createCardClass(applications_group) {\n        return applications_group.reduce((pv, v) => {\n            let app_class = <div className=\"col\" key={v.title + \"_class\"} id={v.title + \"_class\"}>\n                {v.applications.reduce((pv, v) => {\n                    let card = <Card application={v} key={v.id} showEditModal={this.showEditModal.bind(this, v, 'update')} />\n                    pv.push(card)\n                    return pv\n                }, [])}\n                {/* add function not implement */}\n                <div className=\"card card-col\">\n                    <div className=\"card-body new-col\" onClick={this.showEditModal.bind(this, {class: v.class}, 'create')}>\n                        <i className=\"fas fa-plus text-center\"></i>\n                    </div>\n                </div>\n            </div>\n            pv.push(app_class)\n            return pv\n        }, [])\n    }\n\n    // create the class title\n    createCardTitle(applications_group) {\n        return applications_group.reduce((pv, v) => {\n            let title = <div className=\"col\" key={v.title + \"_title\"}>\n                <div className=\"card card-col\">\n                    <div className=\"card-body noPadding\">\n                        <div type=\"text\" className=\"text-center title-col form-control-lg\" >\n                            {v.title}\n                        </div>\n                    </div>\n                </div>\n            </div>\n            pv.push(title);\n            return pv;\n        }, [])\n    }\n\n    // initialize the data, classify data according to their class\n    groupApplication(applications) {\n        let result = [\n            {\n                title: 'Wish list',\n                applications: [],\n                class: \"1\"\n            }, {\n                title: 'Waiting for referral',\n                applications: [],\n                class: \"2\"\n            }, {\n                title: 'Applied',\n                applications: [],\n                class: \"3\"\n            }, {\n                title: 'Rejected',\n                applications: [],\n                class: \"4\"\n            }\n        ]\n        applications?.forEach(app => {\n            let app_class = result.find(v => { return v.class === app.status });\n            app_class?.applications.push(app);\n        })\n        return result;\n    }\n\n    render() {\n        let applicationModal = null\n        if (this.state.application){\n            applicationModal = <CardModal show={this.state.showModal}\n                                          submitFunc={this.updateCardBoard.bind(this)}\n                                          mode={this.state.modalMode}\n                                          application={this.state.application}\n                                          closeEditModal={this.closeEditModal.bind(this)}\n                                          deleteApplication={this.deleteApplication.bind(this)}/>\n        }\n        return (\n            <div>\n            <h1 className=\"text-center\">Dashboard</h1>\n                <span id=\"tab\">\n                    <div className=\"row\">\n                        {this.state.card_titles}\n                    </div>\n                    <div className=\"row\">\n                        {this.state.card_class}\n                    </div>\n                    {applicationModal}\n                </span>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport $ from 'jquery'\n\nconst columns = [\n    {\n        label: 'Company Name',\n        id: 'companyName'\n    }, {\n        label: 'Job title',\n        id: 'jobTitle'\n    }, {\n        label: 'Date',\n        id: 'date'\n    }, {\n        label: '',\n        id: 'func'\n    }\n]\n\nexport default class SearchPage extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            searchText: '',\n            rows: [],\n            addedList: []\n        }\n    }\n\n    search() {\n        if (!this.state.searchText) {\n            alert(\"Search bar cannot be empty!!\")\n            return\n        }\n        $.ajax({\n            url: 'http://localhost:5000/search',\n            method: 'get',\n            data: {\n                keywords: this.state.searchText\n            },\n            contentType: 'application/json',\n            success: (data) => {\n                let res = data.map((d, i) => {\n                    return {\n                        id: i,\n                        jobTitle: d.jobTitle,\n                        companyName: d.companyName,\n                        location: d.location\n                    }\n                });\n                this.setState({\n                    rows: res\n                });\n            }\n        })\n    }\n\n    deleteTheApplication(id) {\n        let newRows = this.state.rows.filter(app => {\n            return app.id !== id\n        })\n        let newAddedList = this.state.addedList.filter(app => {\n            return app.id !== id\n        })\n        this.setState({\n            rows: newRows,\n            addedList: newAddedList\n        })\n    }\n\n    addToWaitlist(job) {\n        let newAddedList = this.state.addedList\n        newAddedList.push(job.id)\n        console.log(job)\n        let newApplication = {\n                jobTitle: job.jobTitle,\n                companyName: job.companyName,\n                date:  new Date().toJSON().slice(0,10).replace(/-/g,'-'),\n                status: '1'\n        };\n        console.log(newApplication);\n        $.ajax({\n            url: 'http://localhost:5000/application',\n            method: 'POST',\n            data:JSON.stringify({\n                application: newApplication\n            }),\n            contentType: 'application/json',\n            success: (msg)=>{\n                console.log(msg)\n            }\n        })\n        this.setState({\n            addedList: newAddedList\n        })\n    }\n\n    removeFromWaitlist(job) {\n        let newAddedList = this.state.addedList.filter(v => {\n            return v !== job.id\n        })\n        this.setState({\n            addedList: newAddedList\n        })\n    }\n\n    handleChange(event) {\n        this.setState({ [event.target.id]: event.target.value });\n    }\n\n    render() {\n        let rows = this.state.rows\n\n        return (\n            <div>\n                <h1 className=\"text-center\">Company Search</h1>\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-6 input-group mb-3\">\n                            <input type=\"text\" id=\"searchText\" className=\"form-control\" placeholder=\"Keyword\" aria-label=\"Username\" aria-describedby=\"basic-addon1\" value={this.state.searchText} onChange={this.handleChange.bind(this)} />\n                        </div>\n                        <div>\n                            <button type=\"button\" className=\"btn btn-secondary\" onClick={this.search.bind(this)}>Search</button>\n                        </div>\n                    </div>\n                </div>\n                <table className=\"table\">\n                    <thead>\n                        <tr>\n                            {columns.map(column => {\n                                return <th key={column.id + '_th'}>{column.label}</th>\n                            })}\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {rows.map(row => {\n                            return <tr key={row.id}>\n                                {columns.map(column => {\n                                    const value = row[column.id];\n                                    if (column.id !== 'func') {\n                                        return <td key={column.id}>{value}</td>\n                                    } else {\n                                        let addButton = this.state.addedList.includes(row.id)\n                                            ? <button type=\"button\" className=\"btn btn-outline-secondary\" onClick={this.removeFromWaitlist.bind(this, row)}> Added </button>\n                                            : <button type=\"button\" className=\"btn btn-secondary\" onClick={this.addToWaitlist.bind(this, row)}> Add </button>\n                                        return <td key={row.id + '_func'}>\n                                            <div className=\"container\">\n                                                <div className=\"row\">\n                                                    <div className=\"col-md-4\">\n                                                        {addButton}\n                                                    </div>\n                                                    &nbsp;&nbsp;\n                                                    <div className=\"col-md-2\">\n                                                        <button type=\"button\" style={{ backgroundColor: 'red' }} className=\"btn btn-secondary\" onClick={this.deleteTheApplication.bind(this, row.id)}> Delete </button>\n                                                    </div>\n                                                </div>\n                                            </div>\n\n\n                                        </td>\n                                    }\n\n                                })}\n\n                            </tr>\n                        })}\n                    </tbody>\n                </table>\n            </div>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport $ from 'jquery'\n\nexport default class LoginPage extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            username: '',\n            password: ''\n        }\n    }\n\n    login() {\n        if (!this.state.username || !this.state.password) {\n            alert(\"Please enter a username and password.\")\n            return\n        }\n        $.ajax({\n            url: 'http://localhost:5000/login',\n            method: 'POST',\n            data: JSON.stringify({\n                email: this.state.username,\n                passwd: this.state.password\n            }),\n            contentType: 'application/json',\n            success: (data) => {\n                localStorage.setItem('auth-token', data[\"auth-token\"]);\n                this.props.switchPage('ApplicationPage');\n            },\n            error: (err) => {\n                console.log(JSON.stringify(err));\n                alert(\"Invalid username or password.\")\n            }\n        })\n    }\n\n    handleChange(event) {\n        this.setState({ [event.target.id]: event.target.value });\n    }\n\n    render() {\n        return (\n            <div>\n                <h1 className=\"text-center\">Login</h1>\n                <div className=\"container\">\n                    <input\n                        type=\"text\"\n                        id=\"username\"\n                        className=\"form-control m-1\"\n                        placeholder=\"Username\"\n                        aria-label=\"Username\"\n                        aria-describedby=\"basic-addon1\"\n                        value={this.state.username}\n                        onChange={this.handleChange.bind(this)}\n                    />\n                    <input\n                        type=\"password\"\n                        id=\"password\"\n                        className=\"form-control m-1\"\n                        placeholder=\"Password\"\n                        aria-label=\"Password\"\n                        aria-describedby=\"basic-addon1\"\n                        value={this.state.password}\n                        onChange={this.handleChange.bind(this)}\n                    />\n                    <button\n                        type=\"button\"\n                        className=\"btn btn-secondary w-100 m-1\"\n                        onClick={this.login.bind(this)}\n                    >\n                        Login\n                    </button>\n                </div>\n            </div>\n        )\n    }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css'\nimport './static/App.css';\n\nimport React from 'react';\nimport Sidebar from './sidebar/Sidebar'\nimport ApplicationPage from './application/ApplicationPage'\nimport SearchPage from './search/SearchPage'\nimport LoginPage from './login/LoginPage';\n\n\nexport default class App extends React.Component {\n  constructor(props){\n    super(props)\n    let mapRouter = {\n      'SearchPage': <SearchPage/>,\n      'ApplicationPage' : <ApplicationPage/>,\n      'LoginPage': <LoginPage switchPage={this.switchPage.bind(this)}/>\n    }\n    this.state ={\n      currentPage: <LoginPage switchPage={this.switchPage.bind(this)}/>,\n      mapRouter: mapRouter\n    }\n  };\n\n  switchPage(pageName){\n    this.setState({\n      currentPage: this.state.mapRouter[pageName]\n    })\n  }\n\n  render() {\n    let app = (<div className=\"main-page\">\n      <Sidebar switchPage={this.switchPage.bind(this)}/>\n      <div className=\"main\">\n        <div className=\"content\">\n          <div className=\"\">\n            {/* <span className=\"btn-icon \">\n              <button className=\"btn btn-danger btn-icon\"><i className=\"fas fa-plus\"></i>&nbsp;New</button>\n            </span> */}\n          </div>\n          {this.state.currentPage}\n        </div>\n      </div>\n    </div>\n    )\n    return app;\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './static/index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}