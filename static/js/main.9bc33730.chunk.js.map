{"version":3,"sources":["sidebar/Sidebar.js","application/Card.js","application/CardModal.js","application/ApplicationPage.js","search/SearchPage.js","App.js","reportWebVitals.js","index.js"],"names":["Sidebar","className","onClick","props","switchPage","Component","date","class","state","wordOfDate","Card","showEditModal","e","stopPropagation","dateType","find","d","application","status","this","jobTitle","companyName","id","CardEdit","closeEditModal","deleteApplication","submitFunc","event","setState","target","value","console","log","function_btn","mode","type","submitAction","bind","Modal","show","onHide","Header","closeButton","Title","Body","htmlFor","onChange","handleChange","Footer","deleteAction","CardBoard","applications","card_titles","card_class","showModal","getData","groupApplication","createCardTitle","createCardClass","$","ajax","url","method","done","data","JSON","parse","result","newApplications","async","stringify","contentType","success","msg","complete","push","responseJSON","updatedApp","idx","findIndex","a","indexOf","splice","modalMode","applications_group","reduce","pv","v","app_class","title","card","forEach","app","applicationModal","updateCardBoard","columns","label","SearchPage","searchText","rows","addedList","keywords","res","map","i","location","alert","newRows","filter","newAddedList","job","getNewId","newID","newApplication","placeholder","search","column","row","addButton","includes","removeFromWaitlist","addToWaitlist","style","backgroundColor","deleteTheApplication","App","mapRouter","currentPage","pageName","React","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9bc33730.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport '@fortawesome/fontawesome-free/js/fontawesome';\nimport '@fortawesome/fontawesome-free/css/fontawesome.css';\nimport '@fortawesome/fontawesome-free/js/solid';\nimport '@fortawesome/fontawesome-free/js/regular';\nimport '@fortawesome/fontawesome-free/js/brands';\n\nimport '../static/Sidebar.css'\nexport default class Sidebar extends Component {\n    render() {\n        return (\n            <div className=\"left-nav\">\n                <div className=\"left-nav-item\">\n                    <div onClick={() => this.props.switchPage('ApplicationPage')}>\n                        <i className=\"fas fa-columns left-nav-icon\" ></i>\n                    </div>\n                    <div onClick={() => this.props.switchPage('SearchPage')}>\n                        <i className=\"fas fa-search left-nav-icon\"></i>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","import React, { Component } from 'react';\n\nlet date = [\n    {\n        class: \"1\",\n        state: \"Wish list\",\n        wordOfDate: \"Apply By\"\n    }, {\n        class: \"2\",\n        state: \"Waiting for referral\",\n        wordOfDate: \"Referral before \"\n    }, {\n        class: \"3\",\n        state: \"Applied\",\n        wordOfDate: \"Applied Date\"\n    }, {\n        class: \"4\",\n        state: \"Rejected\",\n        wordOfDate: \"Applied Date\"\n    }\n]\n\nclass Card extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            showEditModal: props.showEditModal\n        }\n\n    }\n\n    stopPropagation(e){\n        e.stopPropagation()\n    }\n\n    render() {\n        let dateType = date.find(d =>{\n            return d.class === this.props.application.status\n        })\n        return (\n            <div className=\"card card-col\" key={this.state.id+\"_card\"}  onClick={this.state.showEditModal}>\n                <div className=\"card-body\">\n                    <div className=\"card-action\">\n                        <h6 className=\"card-title\"  onClick={this.stopPropagation}>\n                            {this.props.application.jobTitle}\n                        </h6>\n                    </div>\n                    <p className=\"small-content-text\" key={this.props.application.companyName}>\n                        {this.props.application.companyName}<br/>\n                        {dateType.wordOfDate}: {this.props.application.date}\n                    </p>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Card;","import React, { Component } from 'react';\nimport { Modal } from 'react-bootstrap';\nexport default class CardEdit extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            closeEditModal: props.closeEditModal,\n            deleteApplication: props.deleteApplication,\n            submitFunc: props.submitFunc,\n            id: props.application.id,\n            jobTitle: props.application.jobTitle,\n            companyName: props.application.companyName,\n            date: props.application.date,\n            class: props.application.status\n        }\n    }\n\n    // set data to state automatically corresponding to the attribute 'id' of input field\n    // ex: <input id = 'date'> => setState({date: value})\n    handleChange(event){\n\t\tthis.setState({ [event.target.id]: event.target.value });\n\t}\n\n    submitAction(){\n        console.log('hit!')\n        this.state.closeEditModal()\n        let application = {\n            id: this.state.id,\n            companyName: this.state.companyName,\n            jobTitle: this.state.jobTitle,\n            date: this.state.date,\n            status: this.state.class\n        }\n        console.log(application)\n        // call parent function to handle data change\n        this.state.submitFunc(application)\n\n    }\n\n    deleteAction(){\n        this.state.closeEditModal()\n        let application = {\n            id: this.state.id,\n            companyName: this.state.companyName,\n            jobTitle: this.state.jobTitle,\n            date: this.state.date,\n            status: this.state.class\n        }\n        this.state.deleteApplication(application)\n    }\n\n    render() {\n\n        let function_btn = null\n        if (this.props.mode === 'update') {\n            function_btn = <button type=\"button\" className=\"btn btn-success\" onClick={this.submitAction.bind(this)}>\n                Update\n            </button>\n        }else{\n            function_btn = <button type=\"button\" className=\"btn btn-success\" onClick={this.submitAction.bind(this)}>\n                Create\n            </button>\n        }\n\n        let view = !this.props.application ? <div /> : <div>\n            <Modal show={this.props.show} onHide={this.state.closeEditModal}>\n                <Modal.Header closeButton>\n                    <Modal.Title>\n                        {this.props.application.companyName}\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"companyName\" className=\"col-form-label\">Company Name</label>\n                        <input type=\"text\" className=\"form-control\" id=\"companyName\" value={this.state.companyName} onChange={this.handleChange.bind(this)}/>\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"job_title\" className=\"col-form-label\">Job Title</label>\n                        <input type=\"text\" className=\"form-control\" id=\"jobTitle\" value={this.state.jobTitle} onChange={this.handleChange.bind(this)}/>\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"date\" className=\"col-form-label\">Date</label>\n                        <input type=\"date\" className=\"form-control\" id=\"date\" value={this.state.date} onChange={this.handleChange.bind(this)}/>\n                    </div>\n                    <div className=\"input-group mb-3\">\n                        <div className=\"input-group-prepend\">\n                            <label className=\"input-group-text\" htmlFor=\"class\">Application Type</label>\n                        </div>\n                        <select className=\"custom-select\" id=\"class\" value={this.state.class} onChange={this.handleChange.bind(this)}>\n                            <option >Choose...</option>\n                            <option value=\"1\">Wish list</option>\n                            <option value=\"2\">Waiting Referral</option>\n                            <option value=\"3\">Applied</option>\n                            <option value=\"4\">Rejected</option>\n                        </select>\n                    </div>\n                </Modal.Body>\n                <Modal.Footer>\n                    <button type=\"button\" className=\"btn btn-danger mr-auto\" onClick={this.deleteAction.bind(this)}>\n                        Delete\n                    </button>\n                    <button type=\"button\" className=\"btn btn-secondary\" onClick={this.state.closeEditModal}>\n                        Close\n                    </button>\n                    {function_btn}\n                </Modal.Footer>\n            </Modal>\n        </div >\n        return view\n    }\n}","import React, { Component } from 'react';\nimport Card from './Card';\nimport CardModal from './CardModal';\nimport $ from 'jquery'\n\n\nexport default class CardBoard extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            applications: [], \n            card_titles: [],\n            card_class: [],\n            showModal:false\n        }\n        this.getData = this.getData.bind(this);\n        this.groupApplication = this.groupApplication.bind(this);\n        this.createCardTitle = this.createCardTitle.bind(this);\n        this.createCardClass = this.createCardClass.bind(this);\n    }\n\n    // get initial data to render the root page\n    getData(){\n        return $.ajax({\n                url: 'http://localhost:5000/application',\n                method: 'GET'\n        })\n    }\n\n    componentDidMount(){\n        // fetch the data only after this component is mounted\n        this.getData()\n        .done((data) => {\n            data = JSON.parse(data);\n            // console.log(data);\n            let result = this.groupApplication(data);\n            let card_titles = this.createCardTitle(result);\n            let card_class = this.createCardClass(result);\n            this.setState({\n                applications: data, \n                card_titles: card_titles,\n                card_class: card_class\n            })\n        });\n    }\n\n    // the update function for child component\n    updateCardBoard(application){\n        let newApplications = this.state.applications\n        // console.log(application)\n        if (application.id == null){\n            // current application is a new application, create a new one and save in the backend.\n            console.log('new application');\n            $.ajax({\n                url: 'http://localhost:5000/application', //TODO: will have to replace with production URL\n                method: 'POST',\n                async: false,\n                data:JSON.stringify({\n                    application: application\n                }),\n                contentType: 'application/json',\n                success: (msg)=>{\n                    console.log(msg)\n                },\n                complete: function(data) {\n                    newApplications.push(data.responseJSON)\n                }\n            })\n        } else {\n            console.log('updating id=' + application.id)\n            $.ajax({\n                url: 'http://localhost:5000/application',\n                method: 'PUT',\n                async: false,\n                data:JSON.stringify({\n                    application: application\n                }),\n                contentType: 'application/json',\n                success: (msg)=>{\n                    console.log(msg)\n                },\n                complete: function(data) {\n                    let updatedApp = data.responseJSON\n                    let idx = newApplications.findIndex((a => a.id === updatedApp.id))\n                    newApplications[idx] = updatedApp\n                }\n            })\n        }\n        // rerender the page to represent the update result\n        let result = this.groupApplication(newApplications);\n        let card_titles = this.createCardTitle(result);\n        let card_class = this.createCardClass(result);\n\n        this.setState({\n            applications: newApplications,\n            card_titles: card_titles,\n            card_class: card_class,\n            showModal: false,\n            application: null\n        })\n    }\n\n    deleteApplication(application) {\n        let newApplications = this.state.applications\n        console.log('deleting id=' + application.id)\n        $.ajax({\n            url: 'http://localhost:5000/application',\n            method: 'DELETE',\n            async: false,\n            data:JSON.stringify({\n                application: application\n            }),\n            contentType: 'application/json',\n            success: (msg)=>{\n                    console.log(msg)\n            },\n            complete: function(data) {\n                let idx = newApplications.indexOf(data.responseJSON)\n                newApplications.splice(idx, 1)\n            }\n        })\n        // rerender the page to represent the update result\n        let result = this.groupApplication(newApplications);\n        let card_titles = this.createCardTitle(result);\n        let card_class = this.createCardClass(result);\n\n        this.setState({\n            applications: newApplications,\n            card_titles: card_titles,\n            card_class: card_class,\n            showModal: false,\n            application: null\n        })\n    }\n\n    // open the card modal according to the application in parameter\n    showEditModal(application, mode) {\n        let modalMode = mode\n            \n        this.setState({\n            showModal: true,\n            application: application,\n            modalMode: modalMode\n        })\n    }\n\n    closeEditModal() {\n        this.setState({\n            showModal: false,\n            application: null\n        })\n    }\n\n    // create all cards(application) and make cards having the same class in the same column\n    createCardClass(applications_group) {\n        return applications_group.reduce((pv, v) => {\n            let app_class = <div className=\"col\" key={v.title + \"_class\"} id={v.title + \"_class\"}>\n                {v.applications.reduce((pv, v) => {\n                    let card = <Card application={v} key={v.id} showEditModal={this.showEditModal.bind(this, v, 'update')} />\n                    pv.push(card)\n                    return pv\n                }, [])}\n                {/* add function not implement */}\n                <div className=\"card card-col\">\n                    <div className=\"card-body new-col\" onClick={this.showEditModal.bind(this, {class: v.class}, 'create')}>\n                        <i className=\"fas fa-plus text-center\"></i>\n                    </div>\n                </div>\n            </div>\n            pv.push(app_class)\n            return pv\n        }, [])\n    }\n\n    // create the class title\n    createCardTitle(applications_group) {\n        return applications_group.reduce((pv, v) => {\n            let title = <div className=\"col\" key={v.title + \"_title\"}>\n                <div className=\"card card-col\">\n                    <div className=\"card-body noPadding\">\n                        <div type=\"text\" className=\"text-center title-col form-control-lg\" >\n                            {v.title}\n                        </div>\n                    </div>\n                </div>\n            </div>\n            pv.push(title);\n            return pv;\n        }, [])\n    }\n\n    // initialize the data, classify data according to their class\n    groupApplication(applications) {\n        let result = [\n            {\n                title: 'Wish list',\n                applications: [],\n                class: \"1\"\n            }, {\n                title: 'Waiting for referral',\n                applications: [],\n                class: \"2\"\n            }, {\n                title: 'Applied',\n                applications: [],\n                class: \"3\"\n            }, {\n                title: 'Rejected',\n                applications: [],\n                class: \"4\"\n            }\n        ]\n        applications?.forEach(app => {\n            let app_class = result.find(v => { return v.class === app.status });\n            app_class?.applications.push(app);\n        })\n        return result;\n    }\n\n    render() {\n        let applicationModal = null\n        if (this.state.application){\n            applicationModal = <CardModal show={this.state.showModal}\n                                          submitFunc={this.updateCardBoard.bind(this)}\n                                          mode={this.state.modalMode}\n                                          application={this.state.application}\n                                          closeEditModal={this.closeEditModal.bind(this)}\n                                          deleteApplication={this.deleteApplication.bind(this)}/>\n        }\n        return (\n            <span id=\"tab\">\n                <div className=\"row\">\n                    {this.state.card_titles}\n                </div>\n                <div className=\"row\">\n                    {this.state.card_class}\n                </div>\n                {applicationModal}\n            </span>\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport $ from 'jquery'\n\nconst columns = [\n    {\n        label: 'Company Name',\n        id: 'companyName'\n    }, {\n        label: 'Job tilte',\n        id: 'jobTitle'\n    }, {\n        label: 'Date',\n        id: 'date'\n    }, {\n        label: '',\n        id: 'func'\n    }\n]\n\nexport default class SearchPage extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            searchText: '',\n            rows: [],\n            addedList: []\n        }\n    }\n\n    search() {\n        if (!this.state.searchText) {\n            alert(\"Search bar cannot be empty!!\")\n            return\n        }\n        $.ajax({\n            url: 'http://localhost:5000/search',\n            method: 'get',\n            data: {\n                keywords: this.state.searchText\n            },\n            contentType: 'application/json',\n            success: (data) => {\n                let res = data.map((d, i) => {\n                    return {\n                        id: i,\n                        jobTitle: d.jobTitle,\n                        companyName: d.companyName,\n                        location: d.location\n                    }\n                });\n                this.setState({\n                    rows: res\n                });\n            }\n        })\n    }\n\n\n\n    deleteTheApplication(id) {\n        let newRows = this.state.rows.filter(app => {\n            return app.id !== id\n        })\n        let newAddedList = this.state.addedList.filter(app => {\n            return app.id !== id\n        })\n        this.setState({\n            rows: newRows,\n            addedList: newAddedList\n        })\n    }\n\n    addToWaitlist(job) {\n        let newAddedList = this.state.addedList\n        newAddedList.push(job.id)\n        this.getNewId().done((newID=>{\n            let newApplication = {\n                id: newID,\n                jobTitle: job.jobTitle,\n                companyName: job.companyName,\n                date: job.date,\n                class: '1'\n            };\n            $.ajax({\n                url: 'http://localhost:5000/application',\n                method: 'POST',\n                data:JSON.stringify({\n                    application: newApplication\n                }),\n                contentType: 'application/json',\n                success: (msg)=>{\n                    alert(msg);\n                }\n            })\n        }))\n        this.setState({\n            addedList: newAddedList\n        })\n    }\n\n    getNewId() {\n        return $.ajax({\n            async: false,\n            url: 'http://localhost:5000/getNewId',\n            method: 'GET'\n        })\n    }\n\n    removeFromWaitlist(job) {\n        let newAddedList = this.state.addedList.filter(v => {\n            return v !== job.id\n        })\n        this.setState({\n            addedList: newAddedList\n        })\n    }\n\n    handleChange(event) {\n        this.setState({ [event.target.id]: event.target.value });\n    }\n\n    render() {\n        let rows = this.state.rows\n\n        return (\n            <div>\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-6 input-group mb-3\">\n                            <input type=\"text\" id=\"searchText\" className=\"form-control\" placeholder=\"Keyword\" aria-label=\"Username\" aria-describedby=\"basic-addon1\" value={this.state.searchText} onChange={this.handleChange.bind(this)} />\n                        </div>\n                        <div>\n                            <button type=\"button\" className=\"btn btn-secondary\" onClick={this.search.bind(this)}>Search</button>\n                        </div>\n                    </div>\n                </div>\n                <table className=\"table\">\n                    <thead>\n                        <tr>\n                            {columns.map(column => {\n                                return <th key={column.id + '_th'}>{column.label}</th>\n                            })}\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {rows.map(row => {\n                            return <tr key={row.id}>\n                                {columns.map(column => {\n                                    const value = row[column.id];\n                                    if (column.id !== 'func') {\n                                        return <td key={column.id}>{value}</td>\n                                    } else {\n                                        let addButton = this.state.addedList.includes(row.id)\n                                            ? <button type=\"button\" className=\"btn btn-outline-secondary\" onClick={this.removeFromWaitlist.bind(this, row)}> Added </button>\n                                            : <button type=\"button\" className=\"btn btn-secondary\" onClick={this.addToWaitlist.bind(this, row)}> Add </button>\n                                        return <td key={row.id + '_func'}>\n                                            <div className=\"container\">\n                                                <div className=\"row\">\n                                                    <div className=\"col-md-4\">\n                                                        {addButton}\n                                                    </div>\n                                                    &nbsp;&nbsp;\n                                                    <div className=\"col-md-2\">\n                                                        <button type=\"button\" style={{ backgroundColor: 'red' }} className=\"btn btn-secondary\" onClick={this.deleteTheApplication.bind(this, row.id)}> Delete </button>\n                                                    </div>\n                                                </div>\n                                            </div>\n\n\n                                        </td>\n                                    }\n\n                                })}\n\n                            </tr>\n                        })}\n                    </tbody>\n                </table>\n            </div>\n        );\n    }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css'\nimport './static/App.css';\n\nimport React from 'react';\nimport Sidebar from './sidebar/Sidebar'\nimport ApplicationPage from './application/ApplicationPage'\nimport SearchPage from './search/SearchPage'\n\n\nexport default class App extends React.Component {\n  constructor(props){\n    super(props)\n    let mapRouter = {\n      'SearchPage': <SearchPage/>,\n      'ApplicationPage' : <ApplicationPage/>\n    }\n    this.state ={\n      currentPage: <ApplicationPage/>,\n      mapRouter: mapRouter\n    }\n  };\n\n  switchPage(pageName){\n    this.setState({\n      currentPage: this.state.mapRouter[pageName]\n    })\n  }\n\n  render() {\n    let app = (<div className=\"main-page\">\n      <Sidebar switchPage={this.switchPage.bind(this)}/>\n      <div className=\"main\">\n        <div className=\"content\">\n          <h1 className=\"text-center\">My applications</h1>\n          <div className=\"\">\n            {/* <span className=\"btn-icon \">\n              <button className=\"btn btn-danger btn-icon\"><i className=\"fas fa-plus\"></i>&nbsp;New</button>\n            </span> */}\n          </div>\n          {this.state.currentPage}\n        </div>\n      </div>\n    </div>\n    )\n    return app;\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './static/index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}